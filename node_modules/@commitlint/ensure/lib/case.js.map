{"version":3,"sources":["../src/case.js"],"names":["_","ensureCase","raw","target","input","String","replace","trim","transformed","toCase","match","camelCase","kebabCase","snakeCase","upperFirst","startCase","toUpperCase","charAt","slice","toLowerCase","TypeError"],"mappings":";;;;;;AAAA;;IAAYA,C;;;;kBAEGC,U;;;AAEf,SAASA,UAAT,CAAoBC,MAAM,EAA1B,EAA8BC,SAAS,WAAvC,EAAoD;AACnD;AACA;AACA,OAAMC,QAAQC,OAAOH,GAAP,EACZI,OADY,CACJ,oBADI,EACkB,EADlB,EAEZC,IAFY,EAAd;;AAIA,OAAMC,cAAcC,OAAOL,KAAP,EAAcD,MAAd,CAApB;;AAEA,KAAIK,gBAAgB,EAAhB,IAAsBA,YAAYE,KAAZ,CAAkB,KAAlB,CAA1B,EAAoD;AACnD,SAAO,IAAP;AACA;;AAED,QAAOF,gBAAgBJ,KAAvB;AACA;;AAED,SAASK,MAAT,CAAgBL,KAAhB,EAAuBD,MAAvB,EAA+B;AAC9B,SAAQA,MAAR;AACC,OAAK,YAAL;AACC,UAAOH,EAAEW,SAAF,CAAYP,KAAZ,CAAP;AACD,OAAK,YAAL;AACC,UAAOJ,EAAEY,SAAF,CAAYR,KAAZ,CAAP;AACD,OAAK,YAAL;AACC,UAAOJ,EAAEa,SAAF,CAAYT,KAAZ,CAAP;AACD,OAAK,aAAL;AACC,UAAOJ,EAAEc,UAAF,CAAad,EAAEW,SAAF,CAAYP,KAAZ,CAAb,CAAP;AACD,OAAK,YAAL;AACC,UAAOJ,EAAEe,SAAF,CAAYX,KAAZ,CAAP;AACD,OAAK,YAAL;AACA,OAAK,WAAL;AACC,UAAOA,MAAMY,WAAN,EAAP;AACD,OAAK,eAAL;AACA,OAAK,cAAL;AACC,UAAOZ,MAAMa,MAAN,CAAa,CAAb,EAAgBD,WAAhB,KAAgCZ,MAAMc,KAAN,CAAY,CAAZ,CAAvC;AACD,OAAK,YAAL;AACA,OAAK,WAAL;AACA,OAAK,WAAL;AAAkB;AACjB,UAAOd,MAAMe,WAAN,EAAP;AACD;AACC,SAAM,IAAIC,SAAJ,CAAe,qCAAoCjB,MAAO,GAA1D,CAAN;AAtBF;AAwBA","file":"case.js","sourcesContent":["import * as _ from 'lodash';\n\nexport default ensureCase;\n\nfunction ensureCase(raw = '', target = 'lowercase') {\n\t// We delete any content together with quotes because he can contains proper names (example `refactor: `Eslint` configuration`).\n\t// We need trim string because content with quotes can be at the beginning or end of a line\n\tconst input = String(raw)\n\t\t.replace(/`.*?`|\".*?\"|'.*?'/g, '')\n\t\t.trim();\n\n\tconst transformed = toCase(input, target);\n\n\tif (transformed === '' || transformed.match(/^\\d/)) {\n\t\treturn true;\n\t}\n\n\treturn transformed === input;\n}\n\nfunction toCase(input, target) {\n\tswitch (target) {\n\t\tcase 'camel-case':\n\t\t\treturn _.camelCase(input);\n\t\tcase 'kebab-case':\n\t\t\treturn _.kebabCase(input);\n\t\tcase 'snake-case':\n\t\t\treturn _.snakeCase(input);\n\t\tcase 'pascal-case':\n\t\t\treturn _.upperFirst(_.camelCase(input));\n\t\tcase 'start-case':\n\t\t\treturn _.startCase(input);\n\t\tcase 'upper-case':\n\t\tcase 'uppercase':\n\t\t\treturn input.toUpperCase();\n\t\tcase 'sentence-case':\n\t\tcase 'sentencecase':\n\t\t\treturn input.charAt(0).toUpperCase() + input.slice(1);\n\t\tcase 'lower-case':\n\t\tcase 'lowercase':\n\t\tcase 'lowerCase': // Backwards compat config-angular v4\n\t\t\treturn input.toLowerCase();\n\t\tdefault:\n\t\t\tthrow new TypeError(`ensure-case: Unknown target case \"${target}\"`);\n\t}\n}\n"]}