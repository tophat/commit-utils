{"version":3,"sources":["../src/index.test.js"],"names":["ensure","t","glob","expected","map","f","sort","actual","Object","keys","deepEqual","true","every","rule","pattern","join","__dirname","ignore","cwd","files","relative","toExport","filePath","fileName","basename","extname"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,M;;;;;;AAEZ,mBAAK,sBAAL,EAAmCC,CAAN;AAAA;AACV,wBAAMC,KAAK,MAAL,CAAN;AAAA;AAAZC,WAAY,WAAD,CAAqBC,GAArB,CAAyBC,KAAK,uBAAUA,CAAV,CAA9B,EAA4CC,IAA5C,EAAC;AACZC,SADY,GACHC,OAAOC,IAAP,CAAYT,MAAZ,EAAoBM,IAApB,EADG;;AAElBL,KAAES,SAAF,CAAYH,MAAZ,EAAoBJ,QAApB;AAFkB;AAAA;AAAA;AAAA;AAAA;AADU,aAA7B;;AAMA,mBAAK,wBAAL,EAA+BF,KAAK;AACnC,OAAMM,SAAS,oBAAOP,MAAP,CAAf;AACAC,GAAEU,IAAF,CAAOJ,OAAOK,KAAP,CAAaC,QAAQ,OAAOA,IAAP,KAAgB,UAArC,CAAP;AACA,CAHD;;AAKA,SAAeX,IAAf,CAAoBY,OAApB;AAAA;AAAA;AACe,yBAAM,sBAAO,CAAC,eAAKC,IAAL,CAAUC,SAAV,EAAqBF,OAArB,CAAD,CAAP,EAAwC;AAC3DG,WAAQ,CAAC,aAAD,EAAgB,cAAhB,CADmD;AAE3DC,QAAKF;AAFsD,GAAxC,CAAN;AAAA;AAARG,SAAQ;;AAId,mBAAOA,MAAMf,GAAN,CAAUgB,QAAV,EAAoBhB,GAApB,CAAwBiB,QAAxB,CAAP;AAJc;AAAA;AAAA;AAAA;AADf;AAAA;;AAQA,SAASD,QAAT,CAAkBE,QAAlB,EAA4B;AAC3B,QAAO,eAAKF,QAAL,CAAcJ,SAAd,EAAyBM,QAAzB,CAAP;AACA;;AAED,SAASD,QAAT,CAAkBE,QAAlB,EAA4B;AAC3B,QAAO,eAAKC,QAAL,CAAcD,QAAd,EAAwB,eAAKE,OAAL,CAAaF,QAAb,CAAxB,CAAP;AACA","file":"index.test.js","sourcesContent":["import path from 'path';\nimport test from 'ava';\nimport globby from 'globby';\nimport {camelCase, values} from 'lodash';\nimport * as ensure from '.';\n\ntest('exports all checkers', async t => {\n\tconst expected = (await glob('*.js')).map(f => camelCase(f)).sort();\n\tconst actual = Object.keys(ensure).sort();\n\tt.deepEqual(actual, expected);\n});\n\ntest('rules export functions', t => {\n\tconst actual = values(ensure);\n\tt.true(actual.every(rule => typeof rule === 'function'));\n});\n\nasync function glob(pattern) {\n\tconst files = await globby([path.join(__dirname, pattern)], {\n\t\tignore: ['**/index.js', '**/*.test.js'],\n\t\tcwd: __dirname\n\t});\n\treturn files.map(relative).map(toExport);\n}\n\nfunction relative(filePath) {\n\treturn path.relative(__dirname, filePath);\n}\n\nfunction toExport(fileName) {\n\treturn path.basename(fileName, path.extname(fileName));\n}\n"]}