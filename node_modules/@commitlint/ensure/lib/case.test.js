'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _case = require('./case');

var _case2 = _interopRequireDefault(_case);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('true for no params', t => {
	const actual = (0, _case2.default)();
	t.is(actual, true);
});

(0, _ava2.default)('true for empty', t => {
	const actual = (0, _case2.default)('');
	t.is(actual, true);
});

(0, _ava2.default)('true for lowercase', t => {
	const actual = (0, _case2.default)('a');
	t.is(actual, true);
});

(0, _ava2.default)('false for uppercase', t => {
	const actual = (0, _case2.default)('A');
	t.is(actual, false);
});

(0, _ava2.default)('true for lowercase on lowercase', t => {
	const actual = (0, _case2.default)('a', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for uppercase on lowercase', t => {
	const actual = (0, _case2.default)('A', 'lowercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for * on lowercase', t => {
	const actual = (0, _case2.default)('*', 'lowercase');
	console.log({ actual });
	t.is(actual, true);
});

(0, _ava2.default)('true for uppercase on uppercase', t => {
	const actual = (0, _case2.default)('A', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for lowercase on uppercase', t => {
	const actual = (0, _case2.default)('a', 'uppercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for * on uppercase', t => {
	const actual = (0, _case2.default)('*', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for sentencecase on sentencecase', t => {
	const actual = (0, _case2.default)('Sentence case', 'sentence-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for lowercase on sentencecase', t => {
	t.is((0, _case2.default)('sentence case', 'sentence-case'), false);
});

(0, _ava2.default)('true for UPPERCASE on sentencecase', t => {
	t.is((0, _case2.default)('UPPERCASE', 'sentence-case'), true);
});

(0, _ava2.default)('true for Start Case on sentencecase', t => {
	t.is((0, _case2.default)('Start Case', 'sentence-case'), true);
});

(0, _ava2.default)('true for PascalCase on sentencecase', t => {
	t.is((0, _case2.default)('PascalCase', 'sentence-case'), true);
});

(0, _ava2.default)('false for kebab-case on sentencecase', t => {
	t.is((0, _case2.default)('kebab-case', 'sentence-case'), false);
});

(0, _ava2.default)('false for snake_case on sentencecase', t => {
	t.is((0, _case2.default)('snake_case', 'sentence-case'), false);
});

(0, _ava2.default)('false for camelCase on sentencecase', t => {
	t.is((0, _case2.default)('camelCase', 'sentence-case'), false);
});

(0, _ava2.default)('true for * on sentence-case', t => {
	const actual = (0, _case2.default)('*', 'sentence-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on camel-case', t => {
	const actual = (0, _case2.default)('*', 'camel-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on kebab-case', t => {
	const actual = (0, _case2.default)('*', 'kebab-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on snake-case', t => {
	const actual = (0, _case2.default)('*', 'snake-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on pascal-case', t => {
	const actual = (0, _case2.default)('*', 'pascal-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on start-case', t => {
	const actual = (0, _case2.default)('*', 'start-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on lowercase', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on uppercase', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on sentence-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'sentence-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on camel-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'camel-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on kebab-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'kebab-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on snake-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'snake-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on pascal-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'pascal-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for `Any_CASE_iN_back-quotes` on start-case', t => {
	const actual = (0, _case2.default)('`Any_CASE_iN_back-quotes`', 'start-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for lowercase `Any_CASE_iN_back-quotes` lowercase on lowercase', t => {
	const actual = (0, _case2.default)('lowercase `Any_CASE_iN_back-quotes` lowercase', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for UPPERCASE `Any_CASE_iN_back-quotes` UPPERCASE on lowercase', t => {
	const actual = (0, _case2.default)('UPPERCASE `Any_CASE_iN_back-quotes` UPPERCASE', 'lowercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for UPPERCASE `Any_CASE_iN_back-quotes` UPPERCASE on uppercase', t => {
	const actual = (0, _case2.default)('UPPERCASE `Any_CASE_iN_back-quotes` UPPERCASE', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for lowercase `Any_CASE_iN_back-quotes` lowercase on uppercase', t => {
	const actual = (0, _case2.default)('lowercase `Any_CASE_iN_back-quotes` lowercase', 'uppercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for fooBar`Any_CASE_iN_back-quotes`fooBar on camel-case', t => {
	const actual = (0, _case2.default)('fooBar`Any_CASE_iN_back-quotes`fooBar', 'camel-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for Foo Bar`Any_CASE_iN_back-quotes` Foo Bar on camel-case', t => {
	const actual = (0, _case2.default)('Foo Bar`Any_CASE_iN_back-quotes` Foo Bar', 'camel-case');
	t.is(actual, false);
});

(0, _ava2.default)('true for foo-bar`Any_CASE_iN_back-quotes`foo-bar on kebab-case', t => {
	const actual = (0, _case2.default)('foo-bar`Any_CASE_iN_back-quotes`foo-bar', 'kebab-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for Foo Bar `Any_CASE_iN_back-quotes` Foo Bar on kebab-case', t => {
	const actual = (0, _case2.default)('Foo Bar `Any_CASE_iN_back-quotes` Foo Bar', 'kebab-case');
	t.is(actual, false);
});

(0, _ava2.default)('true for foo_bar`Any_CASE_iN_back-quotes`foo_bar on snake-case', t => {
	const actual = (0, _case2.default)('foo_bar`Any_CASE_iN_back-quotes`foo_bar', 'snake-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for Foo Bar `Any_CASE_iN_back-quotes` Foo Bar on snake-case', t => {
	const actual = (0, _case2.default)('Foo Bar `Any_CASE_iN_back-quotes` Foo Bar', 'snake-case');
	t.is(actual, false);
});

(0, _ava2.default)('true for PascalCase`Any_CASE_iN_back-quotes`PascalCase on pascal-case', t => {
	const actual = (0, _case2.default)('PascalCase`Any_CASE_iN_back-quotes`PascalCase', 'pascal-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for Foo Bar `Any_CASE_iN_back-quotes` Foo Bar on pascal-case', t => {
	const actual = (0, _case2.default)('Foo Bar `Any_CASE_iN_back-quotes` Foo Bar', 'pascal-case');
	t.is(actual, false);
});

(0, _ava2.default)('true for Foo Bar`Any_CASE_iN_back-quotes` Foo Bar on start-case', t => {
	const actual = (0, _case2.default)('Foo Bar `Any_CASE_iN_back-quotes`Foo Bar', 'start-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for foo_bar`Any_CASE_iN_back-quotes`foo_bar on start-case', t => {
	const actual = (0, _case2.default)('foo_bar`Any_CASE_iN_back-quotes`foo_bar', 'start-case');
	t.is(actual, false);
});

(0, _ava2.default)('true for lowercase `Any_CASE_iN_back-quotes` `Any_CASE_iN_back-quotes` lowercase on lowercase', t => {
	const actual = (0, _case2.default)('lowercase `Any_CASE_iN_back-quotes` `Any_CASE_iN_back-quotes` lowercase', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)("true for 'Any_CASE_iN_single-quotes' on lowercase", t => {
	const actual = (0, _case2.default)("'Any_CASE_iN_single-quotes'", 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for "Any_CASE_iN_double-quotes" on lowercase', t => {
	const actual = (0, _case2.default)('"Any_CASE_iN_double-quotes"', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for `lowercasel"\'` on lowercase', t => {
	const actual = (0, _case2.default)('`lowercasel"\'`', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for `LOWERCASE on lowercase', t => {
	const actual = (0, _case2.default)('`LOWERCASE', 'lowercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for numeric on camel-case', t => {
	t.true((0, _case2.default)('1.0.0', 'camel-case'));
});

(0, _ava2.default)('true for numeric on kebab-case', t => {
	t.true((0, _case2.default)('1.0.0', 'kebab-case'));
});

(0, _ava2.default)('true for numeric on snake-case', t => {
	t.true((0, _case2.default)('1.0.0', 'snake-case'));
});

(0, _ava2.default)('true for numeric on pascal-case', t => {
	t.true((0, _case2.default)('1.0.0', 'pascal-case'));
});

(0, _ava2.default)('true for numeric on uppercase', t => {
	t.true((0, _case2.default)('1.0.0', 'uppercase'));
});

(0, _ava2.default)('true for numeric on sentencecase', t => {
	t.true((0, _case2.default)('1.0.0', 'sentencecase'));
});

(0, _ava2.default)('true for numeric on lowercase', t => {
	t.true((0, _case2.default)('1.0.0', 'lowercase'));
});
//# sourceMappingURL=case.test.js.map