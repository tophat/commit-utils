{"version":3,"sources":["../src/index.test.js"],"names":["t","throws","error","is","message","actual","raw","m","result","expected","body","footer","header","mentions","merge","notes","references","revert","scope","subject","type","deepEqual","process","cwd","changelogOpts","undefined","parserOpts","opts","Object","assign","commentChar","issue","issuePrefixes","falsy","find","ref","action","owner","prefix","repository","headerPattern","not"],"mappings":"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","file":"index.test.js","sourcesContent":["import importFrom from 'import-from';\nimport test from 'ava';\nimport parse from '.';\n\ntest('throws when called without params', async t => {\n\tconst error = await t.throws(parse());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('throws when called with empty message', async t => {\n\tconst error = await t.throws(parse());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('returns object with raw message', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.raw, message);\n});\n\ntest('calls parser with message and passed options', async t => {\n\tconst message = 'message';\n\n\tawait parse(message, m => {\n\t\tt.is(message, m);\n\t\treturn {};\n\t});\n});\n\ntest('passes object up from parser function', async t => {\n\tconst message = 'message';\n\tconst result = {};\n\tconst actual = await parse(message, () => result);\n\tt.is(actual, result);\n});\n\ntest('returns object with expected keys', async t => {\n\tconst message = 'message';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'message',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'message',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: null,\n\t\tsubject: null,\n\t\ttype: null\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses angular grammar', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope): subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope): subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses custom opts parser', async t => {\n\tconst message = 'type(scope)-subject';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'./fixtures/parser-preset/conventional-changelog-custom'\n\t);\n\tconst actual = await parse(message, undefined, changelogOpts.parserOpts);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope)-subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope)-subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('supports scopes with /', async t => {\n\tconst message = 'type(some/scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.scope, 'some/scope');\n\tt.is(actual.subject, 'subject');\n});\n\ntest('supports scopes with / and empty parserOpts', async t => {\n\tconst message = 'type(some/scope): subject';\n\tconst actual = await parse(message, undefined, {});\n\tt.is(actual.scope, 'some/scope');\n\tt.is(actual.subject, 'subject');\n});\n\ntest('ignores comments', async t => {\n\tconst message = 'type(some/scope): subject\\n# some comment';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst opts = Object.assign({}, changelogOpts.parserOpts, {\n\t\tcommentChar: '#'\n\t});\n\tconst actual = await parse(message, undefined, opts);\n\tt.is(actual.body, null);\n\tt.is(actual.footer, null);\n\tt.is(actual.subject, 'subject');\n});\n\ntest('registers inline #', async t => {\n\tconst message =\n\t\t'type(some/scope): subject #reference\\n# some comment\\nthings #reference';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst opts = Object.assign({}, changelogOpts.parserOpts, {\n\t\tcommentChar: '#'\n\t});\n\tconst actual = await parse(message, undefined, opts);\n\tt.is(actual.subject, 'subject #reference');\n\tt.is(actual.body, 'things #reference');\n});\n\ntest('parses references leading subject', async t => {\n\tconst message = '#1 some subject';\n\tconst opts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst {\n\t\treferences: [actual]\n\t} = await parse(message, undefined, opts);\n\tt.is(actual.issue, '1');\n});\n\ntest('parses custom references', async t => {\n\tconst message = '#1 some subject PREFIX-2';\n\tconst {references} = await parse(message, undefined, {\n\t\tissuePrefixes: ['PREFIX-']\n\t});\n\n\tt.falsy(references.find(ref => ref.issue === '1'));\n\tt.deepEqual(references.find(ref => ref.issue === '2'), {\n\t\taction: null,\n\t\tissue: '2',\n\t\towner: null,\n\t\tprefix: 'PREFIX-',\n\t\traw: '#1 some subject PREFIX-2',\n\t\trepository: null\n\t});\n});\n\ntest('uses permissive default regex without parser opts', async t => {\n\tconst message = 'chore(component,demo): bump';\n\tconst actual = await parse(message);\n\n\tt.is(actual.scope, 'component,demo');\n});\n\ntest('uses permissive default regex with other parser opts', async t => {\n\tconst message = 'chore(component,demo): bump';\n\tconst actual = await parse(message, undefined, {commentChar: '#'});\n\n\tt.is(actual.scope, 'component,demo');\n});\n\ntest('uses restrictive default regex in passed parser opts', async t => {\n\tconst message = 'chore(component,demo): bump';\n\tconst actual = await parse(message, undefined, {\n\t\theaderPattern: /^(\\w*)(?:\\(([a-z]*)\\))?: (.*)$/\n\t});\n\n\tt.is(actual.subject, null);\n\tt.is(actual.scope, null);\n});\n\ntest('works with chinese scope by default', async t => {\n\tconst message = 'fix(面试评价): 测试';\n\tconst actual = await parse(message, undefined, {commentChar: '#'});\n\n\tt.not(actual.subject, null);\n\tt.not(actual.scope, null);\n});\n\ntest('does not work with chinese scopes with incompatible pattern', async t => {\n\tconst message = 'fix(面试评价): 测试';\n\tconst actual = await parse(message, undefined, {\n\t\theaderPattern: /^(\\w*)(?:\\(([a-z]*)\\))?: (.*)$/\n\t});\n\n\tt.is(actual.subject, null);\n\tt.is(actual.scope, null);\n});\n"]}