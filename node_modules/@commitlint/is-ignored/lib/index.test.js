'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VERSION_MESSAGES = ['0.0.1', '0.1.0', '1.0.0', '0.0.1-alpha', '0.0.1-some-crazy-tag', '0.0.1-0', '0.0.1-999', '0.0.1-alpha.0', '0.0.1-alpha.999', '0.0.1-some-crazy-tag.0', '0.0.1-some-crazy-tag.999', '0.0.1-1e69d54', 'v0.0.1', ' v3.0.0'];

const AMENDMENTS = ['Signed-off-by: Developer <example@example.com>', 'Change-Id: I895114872a515a269487a683124b63303818e19c', 'Signed-off-by: Developer <example@example.com>\nChange-Id: I895114872a515a269487a683124b63303818e19c'];

const AMENDED_VERSION_MESSAGES = VERSION_MESSAGES.reduce((results, message) => {
	return [...results, ...AMENDMENTS.map(amendment => `${message}\n\n${amendment}`)];
}, []);

(0, _ava2.default)('should return false when called without arguments', t => {
	t.false((0, _2.default)());
});

(0, _ava2.default)('should return false when called with empty string', t => {
	t.false((0, _2.default)(''));
});

(0, _ava2.default)('should return false for normal commit', t => {
	t.false((0, _2.default)('initial commit'));
});

(0, _ava2.default)('should return true for branch merges', t => {
	t.true((0, _2.default)("Merge branch 'iss53'"));
});

(0, _ava2.default)('should return true for branch merges with newline characters', t => {
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\n"));
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\r\n"));
});

(0, _ava2.default)('should return true for branch merges with multiple newline characters', t => {
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\n\n\n"));
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\r\n\r\n\r\n"));
});

(0, _ava2.default)('should return true for merged PRs', t => {
	t.true((0, _2.default)('Merge pull request #369'));
});

(0, _ava2.default)('should return true for branch merges with newline characters and more characters after it', t => {
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\n "));
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\r\n # some comment"));
});

(0, _ava2.default)('should return true for revert commits', t => {
	t.true((0, _2.default)(`Revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
	t.true((0, _2.default)(`revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
});

(0, _ava2.default)('should ignore npm semver commits', t => {
	VERSION_MESSAGES.forEach(message => t.true((0, _2.default)(message)));
});

(0, _ava2.default)('should ignore npm semver commits with chore', t => {
	VERSION_MESSAGES.forEach(message => t.true((0, _2.default)(`chore: ${message}`)));
	VERSION_MESSAGES.forEach(message => t.true((0, _2.default)(`chore(release): ${message}`)));
});

(0, _ava2.default)('should ignore npm semver commits with footers', t => {
	AMENDED_VERSION_MESSAGES.forEach(message => t.true((0, _2.default)(message)));
});

(0, _ava2.default)('should return true fixup commits', t => {
	t.true((0, _2.default)('fixup! initial commit'));
});

(0, _ava2.default)('should return true squash commits', t => {
	t.true((0, _2.default)('squash! initial commit'));
});

(0, _ava2.default)('should return true for bitbucket merge commits', t => {
	t.true((0, _2.default)('Merged in feature/facebook-friends-sync (pull request #8)'));
	t.true((0, _2.default)('Merged develop into feature/component-form-select-card'));
	t.true((0, _2.default)('Automatic merge'));
});

(0, _ava2.default)('should return true for automatic merge commits', t => {
	t.true((0, _2.default)('Auto-merged develop into master'));
});

(0, _ava2.default)('should return false for commits containing, but not starting, with merge branch', t => {
	t.false((0, _2.default)('foo bar Merge branch xxx'));
});
//# sourceMappingURL=index.test.js.map