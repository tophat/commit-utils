{"version":3,"sources":["../src/index.test.js"],"names":["VERSION_MESSAGES","AMENDMENTS","AMENDED_VERSION_MESSAGES","reduce","results","message","map","amendment","t","false","true","forEach"],"mappings":"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","file":"index.test.js","sourcesContent":["import test from 'ava';\nimport isIgnored from '.';\n\nconst VERSION_MESSAGES = [\n\t'0.0.1',\n\t'0.1.0',\n\t'1.0.0',\n\t'0.0.1-alpha',\n\t'0.0.1-some-crazy-tag',\n\t'0.0.1-0',\n\t'0.0.1-999',\n\t'0.0.1-alpha.0',\n\t'0.0.1-alpha.999',\n\t'0.0.1-some-crazy-tag.0',\n\t'0.0.1-some-crazy-tag.999',\n\t'0.0.1-1e69d54',\n\t'v0.0.1',\n\t' v3.0.0'\n];\n\nconst AMENDMENTS = [\n\t'Signed-off-by: Developer <example@example.com>',\n\t'Change-Id: I895114872a515a269487a683124b63303818e19c',\n\t'Signed-off-by: Developer <example@example.com>\\nChange-Id: I895114872a515a269487a683124b63303818e19c'\n];\n\nconst AMENDED_VERSION_MESSAGES = VERSION_MESSAGES.reduce((results, message) => {\n\treturn [\n\t\t...results,\n\t\t...AMENDMENTS.map(amendment => `${message}\\n\\n${amendment}`)\n\t];\n}, []);\n\ntest('should return false when called without arguments', t => {\n\tt.false(isIgnored());\n});\n\ntest('should return false when called with empty string', t => {\n\tt.false(isIgnored(''));\n});\n\ntest('should return false for normal commit', t => {\n\tt.false(isIgnored('initial commit'));\n});\n\ntest('should return true for branch merges', t => {\n\tt.true(isIgnored(\"Merge branch 'iss53'\"));\n});\n\ntest('should return true for branch merges with newline characters', t => {\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\n\"));\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\r\\n\"));\n});\n\ntest('should return true for branch merges with multiple newline characters', t => {\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\n\\n\\n\"));\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\r\\n\\r\\n\\r\\n\"));\n});\n\ntest('should return true for merged PRs', t => {\n\tt.true(isIgnored('Merge pull request #369'));\n});\n\ntest('should return true for branch merges with newline characters and more characters after it', t => {\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\n \"));\n\tt.true(isIgnored(\"Merge branch 'ctrom-YarnBuild'\\r\\n # some comment\"));\n});\n\ntest('should return true for revert commits', t => {\n\tt.true(\n\t\tisIgnored(\n\t\t\t`Revert \"docs: add recipe for linting of all commits in a PR (#36)\"\\n\\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`\n\t\t)\n\t);\n\tt.true(\n\t\tisIgnored(\n\t\t\t`revert \"docs: add recipe for linting of all commits in a PR (#36)\"\\n\\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`\n\t\t)\n\t);\n});\n\ntest('should ignore npm semver commits', t => {\n\tVERSION_MESSAGES.forEach(message => t.true(isIgnored(message)));\n});\n\ntest('should ignore npm semver commits with chore', t => {\n\tVERSION_MESSAGES.forEach(message => t.true(isIgnored(`chore: ${message}`)));\n\tVERSION_MESSAGES.forEach(message =>\n\t\tt.true(isIgnored(`chore(release): ${message}`))\n\t);\n});\n\ntest('should ignore npm semver commits with footers', t => {\n\tAMENDED_VERSION_MESSAGES.forEach(message => t.true(isIgnored(message)));\n});\n\ntest('should return true fixup commits', t => {\n\tt.true(isIgnored('fixup! initial commit'));\n});\n\ntest('should return true squash commits', t => {\n\tt.true(isIgnored('squash! initial commit'));\n});\n\ntest('should return true for bitbucket merge commits', t => {\n\tt.true(\n\t\tisIgnored('Merged in feature/facebook-friends-sync (pull request #8)')\n\t);\n\tt.true(isIgnored('Merged develop into feature/component-form-select-card'));\n\tt.true(isIgnored('Automatic merge'));\n});\n\ntest('should return true for automatic merge commits', t => {\n\tt.true(isIgnored('Auto-merged develop into master'));\n});\n\ntest('should return false for commits containing, but not starting, with merge branch', t => {\n\tt.false(isIgnored('foo bar Merge branch xxx'));\n});\n"]}